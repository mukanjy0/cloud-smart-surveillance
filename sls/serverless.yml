org: mukanjy0
service: apiSmartSurveillance

provider:
  name: aws
  runtime: python3.12
  memorySize: 512
  timeout: 30
  iam:
    role: arn:aws:iam::819959187501:role/LabRole

functions:
  indexFacesForRekognitionFromS3:
    handler: indexFacesForRekognitionFromS3.lambda_handler
    events:
      - http:
          path: /collection/index/s3
          method: post
          cors: true
          integration: lambda

  searchFacesFromImage:
    handler: searchFacesFromImage.lambda_handler
    events:
      - http:
          path: /face/search
          method: post
          cors: true
          integration: lambda

  createPerson:
    handler: createPerson.lambda_handler
    environment:
      PEOPLE_TABLE:
        Ref: People
    events:
      - http:
          path: /person/create
          method: post
          cors: true
          integration: lambda

  createSecurityStaff:
    handler: createSecurityStaff.lambda_handler
    environment:
      SECURITY_STAFF_TABLE:
        Ref: SecurityStaff
    events:
      - http:
          path: /security/create
          method: post
          cors: true
          integration: lambda

  listTenants:
    handler: listTenants.lambda_handler
    environment:
      SECURITY_STAFF_TABLE:
        Ref: SecurityStaff
    events:
      - http:
          path: /list_tenants
          method: post
          cors: true
          integration: lambda

  createDir:
    handler: createDir.lambda_handler
    events:
      - http:
          path: /bucket/mkdir
          method: post
          cors: true
          integration: lambda

  liveVideo:
    handler: liveVideo.lambda_handler
    environment:
      BUCKET_NAME:
        Ref: Media
      SNS_TOPIC_ARN:
        Ref: LiveVideoStream
    events:
      - schedule: rate(1 minute)

  liveSurveillance:
    handler: liveSurveillance.lambda_handler
    environment:
      PEOPLE_TABLE:
        Ref: People
      PEOPLE_COLLECTION:
        Ref: PeopleCollection
      SNS_TOPIC_ARN:
        Ref: OffenderAlert
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LiveVideoStreamQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: 15

  suspectSearch:
    handler: suspectSearch.lambda_handler
    environment:
      ACCESS_TOKENS_TABLE:
        Ref: AccessTokens
      RECORDED_PEOPLE_TABLE:
        Ref: RecordedPeople
    events:
      - http:
          path: /recorded/person/search
          method: post
          cors: true
          integration: lambda

resources:
  Resources:
    # DynamoDB
    AccessTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AccessTokens
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    People:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: People
        AttributeDefinitions:
          - AttributeName: person_id
            AttributeType: S
        KeySchema:
          - AttributeName: person_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    SecurityStaff:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SecurityStaff
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    RecordedPeople:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RecordedPeople
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: person_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: person_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # S3
    Media:
      Type: AWS::S3::Bucket

    FaceDataset:
      Type: AWS::S3::Bucket

    # SNS
    LiveVideoStream:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "LiveVideoStream"
        Subscription:
          - Endpoint:
              Fn::GetAtt:
                - LiveVideoStreamQueue
                - Arn
            Protocol: "sqs"

    OffenderAlert:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "OffenderAlert"

    OffenderAlertSubscriptionUTEC:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: OffenderAlert
        Protocol: "sqs"
        Endpoint:
          Fn::GetAtt:
            - OffenderAlertQueue
            - Arn
        FilterPolicy:
          tenant_id:
            - "UTEC"

    OffenderAlertSubscriptionRIMAC:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: OffenderAlert
        Protocol: "sqs"
        Endpoint:
          Fn::GetAtt:
            - OffenderAlertQueue
            - Arn
        FilterPolicy:
          tenant_id:
            - "RIMAC"
    # SQS
    LiveVideoStreamQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "LiveVideoStreamQueue"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - LiveVideoStreamDLQ
              - Arn
          maxReceiveCount: 5

    LiveVideoStreamDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "LiveVideoStreamDLQ"

    OffenderAlertQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "OffenderAlertQueue"
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - OffenderAlertDLQ
              - Arn
          maxReceiveCount: 5

    OffenderAlertDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "OffenderAlertDLQ"

    # Rekognition Collection
    PeopleCollection:
      Type: AWS::Rekognition::Collection
      Properties:
        CollectionId: PeopleCollection
